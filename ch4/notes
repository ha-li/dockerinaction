a volume is 
 -a mount point on the container where a portion of the host file system has been mounted.

without volumes, you are limited to working with the union file system of the image

volumes provide a container-independent data storage


2 types of volumes
- docker-managed volumes
- bind mount volumes

Docker Managed Volumes
======================
-docker daemon creates the volume on a portion of the host file system that is reserved for docker
   (typically /var/lib/docker/....)
   
   syntax of docker managed volumes
      docker run -d -v CONTAINER_PATH alpine:latest 

   the only parameter to -v is the path in the container where the volume is created, the
   path on the host is managed by docker daemon

Bind Mount Volume
=================
- are volumes that point to a user-specified location on the host file system
      can be a file or a directory

- used when 
    host provides some file/directory that need to be mounted into the container
    directory tree at some specific point

    want to share data with other processes running outside a container (eg with a host system app/component)

    want to share data on the host at some know location with processes/programs that run in a container
    (eg you have a file on the host machine you want to share as a web page via apache running on a container, 
     you could mount that host file/file system as a bind mount volume to the apache containers /usr/local/apache2/htdocs)

    limitations of bind volumes:
      -fixing the host mount point now makes an otherwise portable container not so portable
      -fixed mount points may create conflict when multiple containers use the same mount point
         if multiple database containers all used the same host mount point would lead to data corruption
 
  syntax of bind mount volume:
      docker run -d --name <containername> 
         -v HOST_ABS_PATH:CONTAINER_ABS_PATH

      eg docker run -d --name web -v ~/Documents/example:/usr/local/apache2/htdocs
           -p 80:80 httpd:latest
  
      also have option of making it read-only via 
           -v HOST_ABS_PATH:CONTAINER_ABS_PATH:ro

   
Sharing Volumes
===============
-two ways to share volumes
1. host dependent sharing
2. generalized sharing and the volumes-from flag

Host Dependent Sharing
-two containers share a volume when both have a Bind Mount Volume that points to the same
 file directory on the host

  eg: mkdir ~/Logs
      docker run --name pwriter -d -v ~/Logs:/data dockerinaction/ch4_writer_a
      docker run --rm -v ~/Logs:/reader-data alpine:latest head /reader-data

  both these containers bind the same host directory, but to different container directories
  limitation is when you have many containers, Bind Mount Volume become hard to maintain.

Generalized sharing (-volumes-from flag)

-docker run command allows you to copy the volumes from other containers to the new container: --volumes-from
-  --volumes-from can be set multiple source containers (one or more other containers)

  eg: docker run --name fowler -v ~/examples:/var/lib/docker/library/poe -v /library alpine:latest echo Fowler Container
      docker run --name knuth -v /library/k.vol1 -v /library/v.vol2 -v /library/l.vol3 alpine:latest echo Knuth Container
      docker run --name aggregator --volumes-from fowler --volumes-from knuth alpine:latest ls /library/
   
- --volumes-from works with both docker managed volumes and bind mount volumes

- --volumes-from is transitive, so you could add
       docker run --name aggregate-consumer --volumes-from aggregator  alpine:latest consume
       
       and this container will inherit the same volumes as aggregator, which got its volumes from fowler and knuth

- you should not use volumes-from under three (3) scenario
     1. if you need to change the permission of the volumes
     2. if you need to remap the volume paths (volumes-from) does not allow remapping
     3. if you are inheriting from multiple containers that all map to the same location, this creates a race condition
     
     
Volume Ownership
-single container own each managed volume
-when you clean up the container, you should also clean up the managed volume
-any volume that is reference by other containers will be skipped during clean up, until the last container
   internally, docker maintains a counter on each container managing a volume
-to clean up a volume when you remove a container, you should use the -v flag
   docker rm -vf $(docker ps -aq) 
-if the last container is not cleaned up with a -v flag, then the volume remains, causing an ophan volume
   orphan volume creates disk space that is unusable

-docker cannot delete bind mount volumes 
   
